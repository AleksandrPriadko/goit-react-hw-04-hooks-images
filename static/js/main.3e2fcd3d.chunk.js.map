{"version":3,"sources":["components/Searchbar/Searchbar.jsx","components/APIGallery/ApiGallery.jsx","components/ImageGallery/ImageGalleryItem.jsx","components/ImageGallery/Modal.jsx","components/ImageGallery/Loader.jsx","components/ImageGallery/Button.jsx","components/ImageGallery/ImageGallery.jsx","App.js","index.js"],"names":["Searchbar","onSubmit","useState","name","setName","className","event","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","axios","defaults","baseURL","axiosGetGallery","searchQuery","page","URL","get","then","response","data","hits","ImageGalleryItem","gallerys","toggleModalImg","map","id","webformatURL","tags","largeImageURL","src","alt","onClick","modalRoot","document","querySelector","Modal","srcImgs","onClose","createPortal","onKeyDown","code","tabIndex","Loaders","color","height","width","Button","onFetchGallery","ImageGallery","gallery","isLoader","largeImg","setLargeImg","setAlt","showModals","setShowModals","toggleModal","prev","Loader","length","App","setGallery","setSearchQuery","setPage","setIsLoader","error","setError","useEffect","fetchGallery","ApiGallery","window","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","query","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e2fcd3d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const handleChange = ({ currentTarget }) => {\r\n    const { value } = currentTarget;\r\n\r\n    setName(value);\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit(name);\r\n    setName(\"\");\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"20452679-d2c9a4c3f38fef4a414948741\";\r\naxios.defaults.baseURL = \"https://pixabay.com/api\";\r\nconst axiosGetGallery = (searchQuery, page) => {\r\n  const URL = `/?q=${searchQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`;\r\n  return axios.get(URL).then((response) => response.data.hits);\r\n};\r\n\r\nexport default axiosGetGallery;\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport default function ImageGalleryItem({ gallerys, toggleModalImg }) {\r\n  return gallerys.map(({ id, webformatURL, tags, largeImageURL }) => (\r\n    <li key={id} className=\"ImageGalleryItem\">\r\n      <img\r\n        src={webformatURL}\r\n        alt={tags}\r\n        className=\"ImageGalleryItem-image\"\r\n        onClick={() => toggleModalImg({ tags, largeImageURL })}\r\n      />\r\n    </li>\r\n  ));\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  gallerys: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      webformatURL: PropTypes.string.isRequired,\r\n      tags: PropTypes.string.isRequired,\r\n      largeImageURL: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  toggleModalImg: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport { createPortal } from \"react-dom\";\r\n//import { useEffect } from \"react\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nexport default function Modal({ srcImgs, tags, onClose }) {\r\n  function handleKeyDown(event) {\r\n    if (event.code === \"Escape\") {\r\n      return onClose();\r\n    }\r\n  }\r\n\r\n  return createPortal(\r\n    <div\r\n      className=\"Overlay\"\r\n      onClick={onClose}\r\n      onKeyDown={handleKeyDown}\r\n      tabIndex=\"-1\"\r\n    >\r\n      <div>\r\n        <img src={srcImgs} alt={tags} />\r\n      </div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  srcImgs: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst Loaders = () => {\r\n  return (\r\n    <div className=\"loader spinner\">\r\n      <Loader type=\"ThreeDots\" color=\"#303f9f\" height={80} width={80} />\r\n    </div>\r\n  );\r\n};\r\nexport default Loaders;\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport default function Button({ onFetchGallery }) {\r\n  return (\r\n    <button type=\"submit\" className=\"Button\" onClick={onFetchGallery}>\r\n      Load more\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  onFetchGallery: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ImageGalleryItem from \"./ImageGalleryItem\";\r\nimport Modal from \"./Modal\";\r\nimport Loader from \"./Loader\";\r\nimport Buton from \"./Button\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nexport default function ImageGallery({ gallery, onFetchGallery, isLoader }) {\r\n  const [largeImg, setLargeImg] = useState(\"\");\r\n  const [alt, setAlt] = useState(\"\");\r\n  const [showModals, setShowModals] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setShowModals((prev) => !prev);\r\n  };\r\n\r\n  const toggleModalImg = (gallery) => {\r\n    setLargeImg(gallery.largeImageURL);\r\n    setAlt(gallery.tags);\r\n    toggleModal();\r\n  };\r\n\r\n  return (\r\n    <div className=\"ImageBlock\">\r\n      <ul className=\"ImageGallery\">\r\n        <ImageGalleryItem gallerys={gallery} toggleModalImg={toggleModalImg} />\r\n      </ul>\r\n      {isLoader && <Loader />}\r\n      {gallery.length > 0 && !isLoader && (\r\n        <Buton onFetchGallery={onFetchGallery} />\r\n      )}\r\n      {showModals && (\r\n        <Modal srcImgs={largeImg} tags={alt} onClose={toggleModal} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  gallery: PropTypes.array.isRequired,\r\n  onFetchGallery: PropTypes.func.isRequired,\r\n  isLoader: PropTypes.bool.isRequired,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Searchbar from \"./components/Searchbar\";\r\nimport ApiGallery from \"./components/APIGallery\";\r\nimport ImageGallery from \"./components/ImageGallery\";\r\n\r\nexport default function App() {\r\n  const [gallery, setGallery] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [isLoader, setIsLoader] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchGallery();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchQuery]);\r\n\r\n  const FormSubmitHandler = (query) => {\r\n    setGallery([]);\r\n    setSearchQuery(query);\r\n    setPage(1);\r\n    setError(error);\r\n  };\r\n\r\n  const fetchGallery = () => {\r\n    setIsLoader(!isLoader);\r\n    ApiGallery(searchQuery, page)\r\n      .then((hits) => {\r\n        setGallery((prev) => [...prev, ...hits]);\r\n        setPage((prev) => prev + 1);\r\n      })\r\n      .then(() => {\r\n        if (page > 1)\r\n          window.scrollTo({\r\n            top: document.documentElement.scrollHeight,\r\n            behavior: \"smooth\",\r\n          });\r\n      })\r\n      .catch((error) => setError(error))\r\n      .finally(() => setIsLoader((prev) => !prev));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Searchbar onSubmit={FormSubmitHandler} />\r\n      <ImageGallery\r\n        gallery={gallery}\r\n        onFetchGallery={fetchGallery}\r\n        isLoader={isLoader}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}